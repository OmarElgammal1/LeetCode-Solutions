450. Delete Node in a BST
https://leetcode.com/problems/delete-node-in-a-bst/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
		if (root == nullptr) {
			return root;
		}
		if (key < root->val) {
			root->left = deleteNode(root->left, key);
		}
		else if (key > root->val) {
			root->right = deleteNode(root->right, key);
		}
		else {
			//Node with only one child or not child
			if (root->left == nullptr) {
				TreeNode* temp = root->right;
				delete root;
				return temp;
			}
			//Node with two children: Get the in-order successor (smallest in the right subtree)
			TreeNode* temp = minValueNode(root->right);
			
			root->val = temp->val;
			root->right = deleteNode(root->right, temp->val);
		}
		return root;
	}
	TreeNode* minValueNode(TreeNode* node) {
		TreeNode* current = node;
		while (current && current->left != nullptr) {
			current = current->left;
		}
		return current;
	}

};
//Ahmed Hesham
